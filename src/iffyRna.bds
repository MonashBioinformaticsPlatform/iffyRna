
//- featureCounts with -R options, against `-t gene` alsow grow features by 300 bases
//- parse out `*.featureCounts` files into NoFeatures.bam files
//- merge all bam files into one, to capture all features
//- call peaks - make pseude regions from NoFeatuers.bam files
//- Make fasta file with new features sequence 
//    - blast those sequences
//    - interproscan for doman identification
//- re-count NoFeatures.bam agains newly made features 
//- perform differential expression

//TODO:
// need to parse out info from interproscan and blast and append that to counts file
// such that user will have all info availiable in degust

string bamFiles
//TODO has to be genes only, will need to check that it is the case
string gtfFile
string fastaRef
string extn = "*.bam"
int threads = 8
bool paired

string progOrig = programPath.pathName()

if(bamFiles.isEmpty()) {
    error "specify -bamFiles"
}
if(gtfFile.isEmpty()) {
    error "specify -gtfFile"
}
if(fastaRef.isEmpty()) {
    error "specify -fastaRef"
}

string iffyDir = "iffyRun/"
if(!iffyDir.exists()) {
    iffyDir.mkdir()
}

string readAssignFiles = iffyDir + "readAssignmentFiles/"
if(!readAssignFiles.exists()) {
    readAssignFiles.mkdir()
}

//STEP ONE: featureCounts

string countsExe = "featureCounts"
string[] depOut 

for(string bam : bamFiles.dirPath(extn)) {
    string name = readAssignFiles + bam.baseName() + ".featureCounts"
    depOut += name
}

string cntsFile = iffyDir + "NonStrandedCounts.txt"
string logFile = iffyDir + ".log_no_features.txt"
depOut += cntsFile
depOut += logFile

string[] bams = bamFiles.dirPath(extn)
string bamsStr = bams.join(" ")

string extrArg = ""
if(paired) {
    extrArg = "-p"
}

//TODO include --readExtension for both 3' and 5' as an option, manly to capture reads near an existing feature
task(depOut <- bams, cpus := threads, taskName := "featureCounts $logFile") {
    sys $countsExe -T $threads \
                   -a $gtfFile \
                   -s 0 \
                   -R CORE \
                   --Rpath $readAssignFiles \
                   -t gene \
                   $extrArg \
                   -o $cntsFile \
                   $bamsStr > $logFile 2>&1
}

//STEP TWO: Get no feature bam files

string noFeatBamFiles = iffyDir + "noFeatureBamFiles/"
if(!noFeatBamFiles.exists()) {
    noFeatBamFiles.mkdir()
}

string noFeatExe = progOrig + "/../scripts/get_no_feature_reads.py"

string[] noFeatBams

for(string bam : bamFiles.dirPath(extn)) {

    string readAssignFile = readAssignFiles + bam.baseName() + ".featureCounts"
    string noFeatBam = noFeatBamFiles + bam.baseName(".bam")
    string outFile = noFeatBam + "_NoFeatures.bam"
    string noFeatLog = noFeatBamFiles + "." + bam.baseName(".bam") + "_NoFeatures.log"
    
    noFeatBams += outFile

    dep(outFile <- [bam, readAssignFile], cpus := 1, taskName := "making no features bam $noFeatBam") {
        sys $noFeatExe $readAssignFile $bam $noFeatBam > $noFeatLog 2>&1
    }
}

goal noFeatBams

// STEP THREE: Merge and re-sort bam files

string samtoolsExe = "samtools"

string noFeatBamsStr = noFeatBams.join(" ")
string mergedBam = iffyDir + "merged.bam"
string mergedSortedBam = iffyDir + "merged_resorted.bam"

dep(mergedSortedBam <- noFeatBams, cpus := threads, taskName := "Merging bams into one") {
    sys $samtoolsExe merge --threads $threads $mergedBam $noFeatBamsStr
    sys $samtoolsExe sort --threads $threads -o $mergedSortedBam $mergedBam
    sys rm $mergedBam
}

goal mergedSortedBam

// STEP FOUR: Call peaks

string peakCallExe = progOrig + "/../scripts/mk_features.py"

string pseudoFeatures = iffyDir + "pseudo_features.txt"

task(pseudoFeatures <- mergedSortedBam, cpus := 1, taskName := "Making pseudo features") {
    sys $peakCallExe $mergedSortedBam > $pseudoFeatures
}

// STEP FIVE: Make sequences for pseudo features

string getSeqsExe = progOrig + "/../scripts/get_seqs.py"

string pseudoSeqs = iffyDir + "pseudo_seqs.fa"

task(pseudoSeqs <- pseudoFeatures, cpus := 1, taskName := "Making pseudo sequnces") {
    sys $getSeqsExe $pseudoFeatures $fastaRef > $pseudoSeqs
}

// STEP SIX: Running BLAST

//TODO probably don't need blast python parse, should be able to ouput
// in the right format, read the docs !

//TODO need to make sure db is in the path export BLASTDB=/references/blast

string blastExe = "blastn"
string blastParseExe = progOrig + "/../scripts/parse_blast.py"

string blastOut = iffyDir + "blast_out.json"
string blastOutTxt = blastOut.swapExt(".json", ".txt")

task([blastOut, blastOutTxt] <- pseudoSeqs, cpus := threads, taskName := "Running BLAST") {
    sys $blastExe -query $pseudoSeqs \
                  -db nt \
                  -num_threads $threads \
                  -outfmt 15 \
                  -perc_identity 0.95 \
                  -out $blastOut
    sys $blastParseExe $blastOut > $blastOutTxt
}

// STEP SEVEN: Running InterProScan

string scanExe = "interproscan.sh"

string scanDir = iffyDir + "interproscan/"
if(!scanDir.exists()) {
    scanDir.mkdir()
}

string[] scanDeps
string[] suffix = [".gff3", ".html.tar.gz", ".json", ".fa.tsv"]

for(string s : suffix) {
    scanDeps += scanDir+pseudoSeqs+s
}

string scanLog = scanDir + "." + pseudoSeqs.baseName().swapExt(".fa", ".log")

task(scanDeps <- pseudoSeqs, cpus := threads, taskName := "Running InterProScan") {
    sys $scanExe --cpu $threads \
                 --seqtype n \
                 --formats TSV,JSON,GFF3,HTML \
                 --output-dir $scanDir \
                 --input $pseudoSeqs > $scanLog 2>&1
}

// STEP EIGHT: Doing counting agains pseudo features

string[] pseudoCntsDeps 
string cntsFilePseudo = iffyDir + "NonStrandedPseudoFeatureCounts.txt"
string logFilePseudo = iffyDir + ".log_pseudo_features.txt"
pseudoCntsDeps += cntsFilePseudo
pseudoCntsDeps += logFilePseudo
string[] inDeps
inDeps += noFeatBams
inDeps += pseudoFeatures

task(pseudoCntsDeps <- inDeps, cpus := threads, taskName := "featureCounts against pseudo features") {
    sys $countsExe -T $threads \
                   -a $pseudoFeatures \
                   -F SAF \
                   -s 0 \
                   $extrArg \
                   -o $cntsFilePseudo \
                   $noFeatBamsStr > $logFilePseudo 2>&1
}
